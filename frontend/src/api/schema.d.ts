/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/event/event_show/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список спектаклей в афише */
        get: operations["event_api_get_event_show_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/event/event/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список всех спектаклей: репертуар */
        get: operations["event_api_get_event_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/event/event/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить данные спектакля по slug */
        get: operations["event_api_get_event_by_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/people/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список людей театра */
        get: operations["people_api_get_people_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/people/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить данные человека по slug */
        get: operations["people_api_get_people_by_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** EventShowFilterSchema */
        EventShowFilterSchema: {
            /** Start At  Gte */
            start_at__gte?: string | null;
            /** Start At  Lte */
            start_at__lte?: string | null;
            /** Start At  Month  Gte */
            start_at__month__gte?: number | null;
            /** Start At  Year  Gte */
            start_at__year__gte?: number | null;
            /** Is Enable */
            is_enable?: boolean | null;
        };
        /** EventPreviewSchema */
        EventPreviewSchema: {
            /** ID */
            id?: number | null;
            /** Название спектакля */
            name: string;
            /** Слаг названия */
            slug: string;
            /** Краткое описание */
            short_description: string;
            /**
             * Обложка в афише
             * @description Обложка спектакля в афише на главной странице
             */
            preview_cover: string;
            /**
             * Возрастное ограничение
             * @description Минимальный разрешенный возраст зрителя, например, 18 лет
             * @default 0
             */
            min_age_limit: number;
        };
        /** EventShowOutSchema */
        EventShowOutSchema: {
            /** Id */
            id: number;
            event: components["schemas"]["EventPreviewSchema"];
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /** Is Premiere */
            is_premiere: boolean;
            /** Link To Buy Ticket */
            link_to_buy_ticket: string;
        };
        /** EventFilterSchema */
        EventFilterSchema: {
            /** Is Enable */
            is_enable?: boolean | null;
        };
        /** EventDetailSchema */
        EventDetailSchema: {
            /** Peoples */
            peoples: components["schemas"]["EventPeopleOutSchema"][];
            /** Images */
            images: components["schemas"]["EventImageOutSchema"][];
            /** ID */
            id?: number | null;
            /** Название спектакля */
            name: string;
            /** Слаг названия */
            slug: string;
            /** Краткое описание */
            short_description: string;
            /**
             * Обложка спектакля
             * @description Горизонтальное изображение в карточке спектакля
             */
            cover: string;
            /**
             * Обложка в афише
             * @description Обложка спектакля в афише на главной странице
             */
            preview_cover: string;
            /**
             * Возрастное ограничение
             * @description Минимальный разрешенный возраст зрителя, например, 18 лет
             * @default 0
             */
            min_age_limit: number;
            /** Подробное описание */
            description: string;
            /**
             * Длительность спектакля
             * Format: time
             */
            duration: string;
            /**
             * Есть антракт
             * @default false
             */
            has_intermission: boolean;
            /**
             * Дата премьеры
             * Format: date
             */
            premiere_at: string;
        };
        /** EventImageOutSchema */
        EventImageOutSchema: {
            /** ID */
            id?: number | null;
            /** Фото */
            image: string;
        };
        /** EventPeopleOutSchema */
        EventPeopleOutSchema: {
            people: components["schemas"]["PeoplePreviewSchema"];
            /** ID */
            id?: number | null;
            /**
             * Тег
             * @description Раздел в карточке спектакля, в котором будет отображаться участник
             */
            tag: string;
            /**
             * Роль участника в спектакле
             * @description Если участник - актер: указать имя персонажа. Если участник выполняет другую роль, например, художник - нужно указать "художник"
             * @default
             */
            role: string | null;
            /**
             * Сортировка
             * @default 0
             */
            sort: number;
        };
        /** PeoplePreviewSchema */
        PeoplePreviewSchema: {
            /** ID */
            id?: number | null;
            /** Имя */
            first_name: string;
            /** Фамилия */
            last_name: string;
            /** Слаг имени */
            slug: string;
            /**
             * Тег
             * @description Фильтр на странице "Коллектив"
             */
            tag?: string | null;
            /**
             * Фотография
             * @default
             */
            photo: string | null;
        };
        /** PeopleDetailSchema */
        PeopleDetailSchema: {
            /** ID */
            id?: number | null;
            /** Имя */
            first_name: string;
            /** Фамилия */
            last_name: string;
            /** Слаг имени */
            slug: string;
            /**
             * Тег
             * @description Фильтр на странице "Коллектив"
             */
            tag?: string | null;
            /**
             * Фотография
             * @default
             */
            photo: string | null;
            /**
             * Описание
             * @default
             */
            description: string | null;
            /** Дата рождения */
            birthday?: string | null;
            /**
             * Должность
             * @default
             */
            position: string | null;
            /**
             * Образование
             * @default
             */
            education: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    event_api_get_event_show_list: {
        parameters: {
            query?: {
                start_at__gte?: string | null;
                start_at__lte?: string | null;
                start_at__month__gte?: number | null;
                start_at__year__gte?: number | null;
                is_enable?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventShowOutSchema"][];
                };
            };
        };
    };
    event_api_get_event_list: {
        parameters: {
            query?: {
                is_enable?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventPreviewSchema"][];
                };
            };
        };
    };
    event_api_get_event_by_slug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDetailSchema"];
                };
            };
        };
    };
    people_api_get_people_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PeoplePreviewSchema"][];
                };
            };
        };
    };
    people_api_get_people_by_slug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PeopleDetailSchema"];
                };
            };
        };
    };
}
